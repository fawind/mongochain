akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "INFO"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
    serializers {
      java = "akka.serialization.JavaSerializer"
      kryo = "com.twitter.chill.akka.ConfiguredAkkaSerializer"
    }
    serialization-bindings {
      "java.io.Serializable" = kryo
    }
  }
  remote {
    netty.tcp {
      hostname = ${?PUBLISH_HOST}
      port = ${?PUBLISH_PORT}
      send-buffer-size = 9991195725860b
      receive-buffer-size = 9991195725860b
      maximum-frame-size = 9991195725860b
    }
    transport-failure-detector {
      heartbeat-interval = 60 s
      acceptable-heartbeat-pause = 20 s
    }
  }

  cluster {
    failure-detector {
      acceptable-heartbeat-pause = 10 s
      threshold = 12.0
    }
    seed-nodes = [${SEED_NODE1}, ${SEED_NODE2}]
    # auto downing is NOT safe for production deployments.
    # you may want to use it during development, read more about it in the docs.
    # auto-down-unreachable-after = 10s
  }
}

# Enable metrics extension in akka-cluster-metrics.
akka.extensions = [
  "akka.cluster.pubsub.DistributedPubSub"
]

akka.cluster.pub-sub {
  # Actor name of the mediator actor, /system/distributedPubSubMediator
  name = distributedPubSubMediator

  # Start the mediator on members tagged with this role.
  # All members are used if undefined or empty.
  role = ""

  # The routing logic to use for 'Send'
  # Possible values: random, round-robin, broadcast
  routing-logic = random

  # How often the DistributedPubSubMediator should send out gossip information
  gossip-interval = 10s

  # Removed entries are pruned after this duration
  removed-time-to-live = 120s

  # Maximum number of elements to transfer in one message when synchronizing the registries.
  # Next chunk will be transferred in next round of gossip.
  max-delta-elements = 3000

  # When a message is published to a topic with no subscribers send it to the dead letters.
  send-to-dead-letters-when-no-subscribers = on

  # The id of the dispatcher to use for DistributedPubSubMediator actors.
  # If not specified default dispatcher is used.
  # If specified you need to define the settings of the actual dispatcher.
  use-dispatcher = ""
}
